@using System.Linq
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using MrCMS.Entities.Documents.Web
@using MrCMS.Services
@model MrCMS.Web.Admin.Models.WebpageEdit.RedirectSEOTabViewModel
@inject IWebpageMetadataService _webpageMetadataService
@{
    var webpage = ViewData["webpage"] as Webpage;
}
<div class="d-inline">
    <i class="fa fa-question-circle" rel="tooltip" data-placement="top" data-original-title="This is the URL which people will see in the browser bar.
            For example if your Permalink is /hello-world and your domain is www.example.com, your full URL will be www.example.com/hello-world">&nbsp;</i>

    @await Html.Resource("Admin Webpage Seo Permalink", "Permalink"): /<span id="url-span">@Model.UrlSegment</span> @Html.TextBoxFor(x => x.UrlSegment, new {@class = "form-control", style = "display:none;"})
    @Html.ValidationMessageFor(x => x.UrlSegment, "", new {@class = "error"})
    <button id="change-url" class="btn btn-secondary btn-sm">Change</button>

    <hr/>

    <i class="fa fa-question-circle" rel="tooltip" data-placement="top" data-original-title="The publish date can be set in the future should you wish the page to go live at a later date">&nbsp;</i>
    <label asp-for="PublishOn">
        Publish On - <span class="@(Model.PublishStatus == Webpage.WebpagePublishStatus.Published ? "text-success" : "text-warning")" style="line-height: 38px;">@await Html.Resource(Model.PublishStatus.ToString())&nbsp;</span>
    </label>
    <input type="text" asp-for="PublishOn" class="form-control date-time-picker" autocomplete="off" />
    <span asp-validation-for="PublishOn"></span>

    <hr/>

    <div class="d-inline">
        <i class="fa fa-question-circle" rel="tooltip" data-placement="top" data-original-title="Mr CMS is great - it saves old Urls as you change the page Url so that search engines never miss a page. If you change your page from /my-page to /my-page2, Mr CMS will remember this and redirect the old Url to the new Url">&nbsp;</i> Url History

        @Html.ActionLink(await Html.PlainResource("Add"), "Add", "UrlHistory", new {webpageId = Model.Id}, new {@class = "btn btn-sm btn-success", data_toggle = "fb-modal"})
    </div>
    @if (webpage.Urls.Any())
    {
        <table class="table table-striped table-condensed pt-3">
            <tbody>
            @foreach (var url in webpage.Urls.OrderByDescending(history => history.CreatedOn))
            {
                <tr>
                    <td>
                        <a href="http://@webpage.Site.BaseUrl/@url.UrlSegment" target="_blank">http://@webpage.Site.BaseUrl/@url.UrlSegment</a>
                    </td>
                    <td>
                        @Html.ActionLink("Delete", "Delete", "UrlHistory", new {id = url.Id}, new {@class = "btn btn-sm btn-danger", data_toggle = "fb-modal"})
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        @await Html.Resource("Admin Webpage Seo No URL History", "No URL History")
    }

</div>

<hr/>
<strong>@await Html.Resource("Page type"):</strong> @_webpageMetadataService.GetWebpageMetadata(Html, Model.Id).Name
<br/>
<strong>@await Html.Resource("Created On"): </strong>@webpage.CreatedOn
<br/>
<strong>@await Html.Resource("Last Updated"): </strong>@webpage.UpdatedOn
<br/>
<strong>Page Id: </strong>@Model.Id