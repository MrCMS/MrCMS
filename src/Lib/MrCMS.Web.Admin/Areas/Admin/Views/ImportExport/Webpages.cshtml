@using MrCMS.Web.Admin.Infrastructure.TagHelpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model MrCMS.Models.ExportWebpagesModel
@{
    ViewBag.Title = "Import/Export Documents";
    var result = (ImportWebpagesResult)ViewBag.Messages;
}

<admin-header>
    <row>
        <admin-header-title title="@await Html.Resource("admin-import-export-documents", "Import/Export Webpages", option=> option.DisableInlineEditing())" />
        <admin-header-actions></admin-header-actions>
    </row>
</admin-header>
<row>
    <div class="col-6">
        <div class="btn-group">
            <a href="@Url.Action("ExportWebpages", "ImportExport")" class="btn btn-primary">
                @await Html.Resource("Admin Import / Export Documents Export Button", "Export Documents")
            </a>
        </div>
    </div>
    <div class="col-6">
        <form asp-action="ExportWebpagesToEmail" asp-controller="ImportExport" method="post">
            <div class="form-group">
                <label asp-for="Email"></label>
                <input asp-for="Email" type="text" class="form-control" />
                <span asp-validation-for="Email"></span>
            </div>
            <button class="btn btn-primary">
                @await Html.Resource("Admin Import / Export Do", "Export and send via email")
            </button>
        </form>
    </div>
</row>

@if (ViewBag.ExportStatus != null)
{
    <br />
    <span class="alert alert-info" role="alert">
        @ViewBag.ExportStatus
    </span>
    <div class="clearfix"></div>
}
<hr />
@Html.InfoBlock("", await Html.PlainResource("Admin Import / Export Documents Info", "Import File must be in .xslx format. After clicking on 'Import Documents' any new documents inside file will be added to database and existing ones will be updated with provided values in file."))
<hr />
<form asp-controller="ImportExport" asp-action="ImportWebpages" enctype="multipart/form-data" type="post">
    <label for="document">@await Html.Resource("Admin Import / Export Documents Choose Import File Label", "Choose Import File")</label>
    <input type="file" name="document" id="document" />
    <br />
    @if (result != null)
    {
        foreach (var item in result.Errors)
        {
            <span>
                @await Html.Resource("Admin Import / Export Documents Choose Import File Errors", "{key} has the following errors", configureOptions=>configureOptions.AddReplacement("key",item.Key))
            </span>
            <ul>
                @foreach (string error in item.Value)
                {
                    <li>
                        @error
                    </li>
                }
            </ul>
        }
        @if (result.Success)
        {
            <div class="alert alert-success" role="alert">
                @await Html.Resource("Admin Import / Export Documents Choose Batch Created", "A batch run was successfully created for the file").
            </div>
        }
    }
    @if (ViewBag.ImportStatus != null)
    {
        <div class="alert alert-danger" role="alert">
            @ViewBag.ImportStatus
        </div>
    }

    <input type="submit" class="btn btn-primary" value="@await Html.Resource("Import Documents", options => options.DisableInlineEditing())" />
</form>