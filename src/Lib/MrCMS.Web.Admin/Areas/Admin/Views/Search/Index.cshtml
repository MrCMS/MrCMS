@using System.Drawing
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using MrCMS.Entities.Documents.Media
@using MrCMS.TextSearch.Services
@using MrCMS.Web.Admin.Helpers
@using MrCMS.Web.Admin.Infrastructure.TagHelpers
@using MrCMS.Web.Admin.Models.Search
@using X.PagedList
@using X.PagedList.Mvc.Bootstrap4.Core
@using X.PagedList.Mvc.Core
@model MrCMS.TextSearch.Services.ITextSearcher.PagedTextSearcherQuery
@{
    var results = ViewData["results"] as IPagedList<AdminSearchResult>;
    List<SelectListItem> typeOptions = ViewData["type-options"] as List<SelectListItem>;
    List<SelectListItem> sortByOptions = EnumHelper<ITextSearcher.TextSearcherQuery.TextSearcherQuerySort>.GetOptions();
}

<form asp-controller="Search" asp-action="Index" method="get">

    <admin-header>
        <row>
            <admin-header-title title="@await Html.Resource("admin - search - title", "Search", option=> option.DisableInlineEditing()) @(!string.IsNullOrWhiteSpace(Model.Term) ? " - " + Model.Term : "")"/>

            <admin-header-actions>
                <input type="submit" value="Search" class="btn btn-primary"/>
            </admin-header-actions>
        </row>
    </admin-header>


    <div class="row">
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.Term)
                @Html.TextBoxFor(x => x.Term, new {@class = "form-control"})
                @Html.ValidationMessageFor(x => x.Term)
            </div>
        </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.Type)
                @Html.DropDownListFor(x => x.Type, typeOptions, new {@class = "form-control"})
                @Html.ValidationMessageFor(x => x.Type)
            </div>
        </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.CreatedOnFrom)
                @Html.TextBoxFor(x => x.CreatedOnFrom, new {@class = "date-time-picker form-control", autocomplete="off"})
                @Html.ValidationMessageFor(x => x.CreatedOnFrom)
            </div>
        </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.CreatedOnTo)
                @Html.TextBoxFor(x => x.CreatedOnTo, new {@class = "date-time-picker form-control", autocomplete="off"})
                @Html.ValidationMessageFor(x => x.CreatedOnTo)
            </div>
        </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.UpdatedOnFrom)
                @Html.TextBoxFor(x => x.UpdatedOnFrom, new {@class = "date-time-picker form-control", autocomplete="off"})
                @Html.ValidationMessageFor(x => x.UpdatedOnFrom)
            </div>
        </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.UpdatedOnTo)
                @Html.TextBoxFor(x => x.UpdatedOnTo, new {@class = "date-time-picker form-control", autocomplete="off"})
                @Html.ValidationMessageFor(x => x.UpdatedOnTo)
            </div>
        </div>
        <div class="col-lg-6">
            <div class="form-group">
                @Html.LabelFor(x => x.SortBy)
                @Html.DropDownListFor(x => x.SortBy, sortByOptions, new {@class = "form-control"})
                @Html.ValidationMessageFor(x => x.SortBy)
            </div>
        </div>
    </div>
    @Html.ValidationSummary()


</form>


<div id="search-results">
    @if (results == null || !results.Any())
    {
        <p>No documents could be found matching your search term</p>
    }
    else
    {
        <table class="table table-striped">
            <tr>
                <th class="col-lg-8">Page</th>
                <th class="col-lg-4">Type</th>
            </tr>
            @foreach (AdminSearchResult result in results)
            {
                <tr>
                    <td>
                        <a href="@result.ActionUrl" class="">
                            @if (result.Entity is MediaFile)
                            {
                                var file = result.Entity as MediaFile;
                                if (file.IsImage())
                                {
                                    @await Html.RenderImage(file.FileUrl, new Size(100, 100))
                                }
                                else
                                {
                                    <i class="@file.FileExtension.GetIconClass()"> </i>
                                }
                                <br/>
                            }
                            <strong>@result.DisplayName</strong>
                        </a>

                        <br/>
                        <p>Last updated on @result.Entity.UpdatedOn</p>
                    </td>
                    <td>@result.Type</td>
                </tr>
            }
        </table>
        @Html.PagedListPager(results, page => Url.Action("Index", new {page, Model.CreatedOnFrom, Model.CreatedOnTo, Model.Term, Model.Type}), Bootstrap4PagedListRenderOptions.ClassicPlusFirstAndLast)
    }
</div>